{"version":3,"sources":["comp/Graph.js","comp/Main.js","comp/Company.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","d","useState","gData","setGdata","useEffect","className","style","height","data","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","type","indexScale","round","valueFormat","format","enabled","colors","scheme","defs","id","background","color","size","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","Main","subject","Corona","DATA","setData","tit","DESCRIPTION","push","onChange","e","filter","day","target","value","map","k","border","dataView","Company","App","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57df47cd.chunk.js","sourcesContent":[" //comp > Graph.js\r\nimport {useEffect, useState} from \"react\";\r\nimport \"../App.css\";\r\nimport { ResponsiveBar } from '@nivo/bar';\r\n\r\nexport default function Graph({d}){\r\n    let [gData,setGdata] = useState(d);\r\n     //1차 접종자 - fir_inc, fir_inc1\r\n     //2차 접종자 - scd_inc, scd_inc1    \r\n    useEffect(()=>{\r\n        setGdata (\r\n            [\r\n                {\r\n                    \"country\": \"1차 접종자\",\r\n                    \"접종자 수\": d[0]['fir_inc1'],\r\n                    \"접종 누계\": d[0]['fir_inc']\r\n                },\r\n                {\r\n                    \"country\": \"2차 접종자\",\r\n                    \"접종자 수\": d[0]['scd_inc1'],\r\n                    \"접종 누계\": d[0]['scd_inc']\r\n                }\r\n            ]\r\n        );\r\n    },[d]);\r\n\r\n    \r\n    // {\r\n    //     \"country\": \"1차 접종자\",\r\n    //     \"burger\": 300,\r\n    //     \"burgerColor\": \"hsl(290, 70%, 50%)\",\r\n    //     \"kebab\": 98,\r\n    //     \"kebabColor\": \"hsl(130, 70%, 50%)\"\r\n    // }\r\n    return(\r\n        <div className=\"grap\" style={{height:'600px'}}>\r\n            <ResponsiveBar\r\n                data={gData}\r\n                keys={[ '접종자 수','접종 누계' ]}\r\n                indexBy=\"country\"\r\n                margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                valueFormat={{ format: '', enabled: false }}\r\n                colors={{ scheme: 'nivo' }}\r\n                defs={[\r\n                    {\r\n                        id: 'dots',\r\n                        type: 'patternDots',\r\n                        background: 'inherit',\r\n                        color: '#38bcb2',\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: 'lines',\r\n                        type: 'patternLines',\r\n                        background: 'inherit',\r\n                        color: '#eed312',\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n                fill={[\r\n                    {\r\n                        match: {\r\n                            id: 'fries'\r\n                        },\r\n                        id: 'dots'\r\n                    },\r\n                    {\r\n                        match: {\r\n                            id: 'sandwich'\r\n                        },\r\n                        id: 'lines'\r\n                    }\r\n                ]}\r\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: '접종자',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 32\r\n                }}\r\n                axisLeft={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: '',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -40\r\n                }}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n}","//Main.js\r\nimport {useState} from \"react\";\r\nimport Corona from \"../data/corona19.json\";\r\nimport Graph from \"./Graph.js\";\r\nimport \"../App.css\";\r\n\r\nexport default function Main(){\r\n    let subject = [];\r\n    let [data,setData] = useState(Corona.DATA);\r\n\r\n    for(let tit in Corona.DESCRIPTION){\r\n        subject.push(Corona.DESCRIPTION[tit]);\r\n    }\r\n    function dataChange(e){\r\n        // data 139개 데이터가 갖고있음\r\n        setData(\r\n            Corona.DATA.filter(day => (\r\n                day['s_vc_dt'] == e.target.value\r\n                // json날짜 == 셀렉터날짜\r\n            ))\r\n        );\r\n        // data 1개 테이터만 갖음\r\n    }\r\n\r\n    return(\r\n        <div className=\"contents1\"> \r\n            <section>\r\n                <h3>코로나 예방접종 현황</h3>\r\n                <div>\r\n                    <select id=\"day\" onChange={ dataChange}>\r\n                    {\r\n                        Corona.DATA.map(function(data,k){\r\n                            return (\r\n                                <option key={k}>\r\n                                    {data['s_vc_dt']}\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                    </select>\r\n                </div>\r\n                <table className=\"main1\" border=\"1\">\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                            subject.map(function(tit,k){\r\n                                return <th key={k}> {tit} </th>;\r\n                            })            \r\n                        }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            data.map(function(dataView,k){\r\n                                return (\r\n                                    <tr key={k}>   \r\n                                        <td>{dataView['s_vc_dt']}</td>\r\n                                        <td>{dataView['fir_sub']}</td>\r\n                                        <td>{dataView['fir_inc1']}</td>\r\n                                        <td>{dataView['fir_inc']}</td>\r\n                                        <td>{dataView['fir_inc_rate']}</td>\r\n                                        <td>{dataView['scd_inc1']}</td>\r\n                                        <td>{dataView['scd_inc']}</td>\r\n                                        <td>{dataView['scd_inc_rate']}</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        }       \r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n            <Graph d={data}/>\r\n        </div>\r\n    );\r\n}","//Main.js\r\nimport {useState} from \"react\";\r\nimport Corona from \"../data/corona19.json\";\r\nimport Graph from \"./Graph.js\";\r\nimport \"../App.css\";\r\n\r\nexport default function Company(){\r\n    let subject = [];\r\n    let [data,setData] = useState(Corona.DATA);\r\n\r\n    for(let tit in Corona.DESCRIPTION){\r\n        subject.push(Corona.DESCRIPTION[tit]);\r\n    }\r\n    function dataChange(e){\r\n        // data 139개 데이터가 갖고있음\r\n        setData(\r\n            Corona.DATA.filter(day => (\r\n                day['s_vc_dt'] == e.target.value\r\n                // json날짜 == 셀렉터날짜\r\n            ))\r\n        );\r\n        // data 1개 테이터만 갖음\r\n    }\r\n\r\n    return(\r\n        <div className=\"contents1\"> \r\n            <section>\r\n                <h3>코로나 예방접종 현황</h3>\r\n                <div>\r\n                    <select id=\"day\" onChange={ dataChange}>\r\n                    {\r\n                        Corona.DATA.map(function(data,k){\r\n                            return (\r\n                                <option key={k}>\r\n                                    {data['s_vc_dt']}\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                    </select>\r\n                </div>\r\n                <table className=\"main1\" border=\"1\">\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                            subject.map(function(tit,k){\r\n                                return <th key={k}> {tit} </th>;\r\n                            })            \r\n                        }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            data.map(function(dataView,k){\r\n                                return (\r\n                                    <tr key={k}>   \r\n                                        <td>{dataView['s_vc_dt']}</td>\r\n                                        <td>{dataView['fir_sub']}</td>\r\n                                        <td>{dataView['fir_inc1']}</td>\r\n                                        <td>{dataView['fir_inc']}</td>\r\n                                        <td>{dataView['fir_inc_rate']}</td>\r\n                                        <td>{dataView['scd_inc1']}</td>\r\n                                        <td>{dataView['scd_inc']}</td>\r\n                                        <td>{dataView['scd_inc_rate']}</td>\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        }       \r\n                    </tbody>\r\n                </table>\r\n            </section>\r\n            <Graph d={data}/>\r\n        </div>\r\n    );\r\n}","\nimport './App.css';\nimport Main from './comp/Main';\n\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport Company from './comp/Company';\n\nfunction App() {\n  return (\n  <BrowserRouter>\n    <header>\n      <div className=\"nav\">\n        <Link to=\"/\">예방접종 현황</Link>\n        <Link to=\"/company\">확진자 현황</Link>\n      </div>\n    </header>\n    <Switch>\n      <Route exact path=\"/\"> <Main /> </Route>\n      <Route path=\"/company\"> <Company /> </Route>\n    </Switch>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}